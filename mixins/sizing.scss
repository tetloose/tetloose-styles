@use '../settings/variables' as *;
@use '../mixins/media-query' as *;
@use 'sass:list';
@use 'sass:meta';

@mixin sizing($css-property, $values) {
	@if meta.type-of($values) == 'list' {
		@include mq($vw-min, max-width) {
			$result: ();

			@each $value in $values {
				$result: list.append(
					$result,
					calc(#{ $value } / #{ $vw-context } * #{ $vw-adjustment-min })
				);
			}

			#{$css-property}: $result;
		}

		@include mq($vw-min) {
			$result: ();

			@each $value in $values {
				$result: list.append(
					$result,
					calc(#{ $value } / #{ $vw-context } * #{ $vw-adjustment-max })
				);
			}

			#{$css-property}: $result;
		}

		@include mq($vw-max) {
			#{$css-property}: $values;
		}
	} @else {
		@include mq($vw-min, max-width) {
			#{$css-property}: calc(#{ $values } / #{ $vw-context } * #{ $vw-adjustment-min });
		}

		@include mq($vw-min) {
			#{$css-property}: calc(#{ $values } / #{ $vw-context } * #{ $vw-adjustment-max });
		}

		@include mq($vw-max) {
			#{$css-property}: $values;
		}
	}
}

// Usage
// Single value
// @include sizing('padding-top', size(2));
// Multi value
// pass in values via css list array
// @include sizing('padding', [size(2.5), size(5), size(7.5), size(10)]);
// @include sizing('padding', [size(2.5), size(5), size(7.5)]);
// @include sizing('padding', [size(2.5), size(5)]);
// @include sizing('padding', [size(2.5), 0]);
