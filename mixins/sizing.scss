@use 'sass:list';
@use 'sass:string';

// calculate size based on layout spacing
@function size($size) {
	@return calc(vars(layout, spacing) * $size);
}

// Usage
// e.g. padding-top: 42px;
// 42 / vars(layout, spacing) -> 4px = 42 / 4 = 10.5
// padding-top: size(10.5)

@mixin sizing(
	$css-property,
	$values) {
	@if type-of($values) == list {
		@include mq($vw-min, max-width) {
			$result: ();

			@each $value in $values {
				$context: calc($value / $vw-context * $vw-adjustment-min);
				$result: list.append($result, $context);
			}

			#{$css-property}: string.unquote('#{join($result, '')}');
		}

		@include mq($vw-min) {
			$result: ();

			@each $value in $values {
				$context: calc($value / $vw-context * $vw-adjustment-max);
				$result: list.append($result, $context);
			}

			#{$css-property}: string.unquote('#{join($result, '')}');
		}
	} @else {
		@include mq($vw-min, max-width) {
			#{$css-property}: calc($values / $vw-context * $vw-adjustment-min);
		}

		@include mq($vw-min) {
			#{$css-property}: calc($values / $vw-context * $vw-adjustment-max);
		}
	}
}

// Usage
// Single value
// @include sizing('padding-top', size(2));
// Multi value
// pass in values via css list array
// @include sizing('padding', [size(2.5), size(5), size(7.5), size(10)]);
// @include sizing('padding', [size(2.5), size(5), size(7.5)]);
// @include sizing('padding', [size(2.5), size(5)]);
// @include sizing('padding', [size(2.5), 0]);
